/* eslint-disable no-console */
'use client';

import type { ResetPasswordInput } from '@/api/schemas/auth/reset-password.schema';
import { zodResolver } from '@hookform/resolvers/zod';
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { toast } from 'sonner';
import { resetPasswordSchema } from '@/api/schemas/auth/reset-password.schema';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';

import { Input } from '@/components/ui/input';

export function ResetPasswordDialog() {
  const [open, setOpen] = useState(false);

  const form = useForm<ResetPasswordInput>({
    resolver: zodResolver(resetPasswordSchema),
    defaultValues: {
      oldPassword: '',
      newPassword: '',
      confirmPassword: '',
    },
  });

  const onSubmit = async (data: ResetPasswordInput) => {
    console.log('üöÄ B·∫Øt ƒë·∫ßu g·ª≠i d·ªØ li·ªáu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u...');
    console.log('üì¶ Payload:', data);

    try {
      // TODO: call API PATCH /api/auth/reset-password
      // await mutateAsync(data);

      console.log('‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!');
      toast.success('ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i');

      setOpen(false);
      form.reset();
    } catch (err) {
      console.error('‚ùå L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:', err);
      toast.error('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i');
    }
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="outline">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</DialogTitle>
          <DialogDescription>
            Nh·∫≠p m·∫≠t kh·∫©u c≈© v√† m·∫≠t kh·∫©u m·ªõi c·ªßa b·∫°n ƒë·ªÉ c·∫≠p nh·∫≠t.
          </DialogDescription>
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="oldPassword"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>M·∫≠t kh·∫©u c≈©</FormLabel>
                  <FormControl>
                    <Input type="password" placeholder="Nh·∫≠p m·∫≠t kh·∫©u c≈©" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="newPassword"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>M·∫≠t kh·∫©u m·ªõi</FormLabel>
                  <FormControl>
                    <Input type="password" placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="confirmPassword"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi</FormLabel>
                  <FormControl>
                    <Input type="password" placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="flex justify-end gap-2">
              <Button type="button" variant="outline" onClick={() => setOpen(false)}>
                H·ªßy
              </Button>
              <Button type="submit">X√°c nh·∫≠n</Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
